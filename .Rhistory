# leave this chunk alone
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
options(digits = 3)
# default figure size
knitr::opts_chunk$set(
fig.width=6.75,
fig.height=6.75,
fig.align = "center"
)
listings<-listings%>%
mutate(neighbourhood_simplified=neighbourhood_cleansed)
# leave this chunk alone
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
options(digits = 3)
# default figure size
knitr::opts_chunk$set(
fig.width=6.75,
fig.height=6.75,
fig.align = "center"
)
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = xfun::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
library(tidyverse) # the usual stuff: dplyr, readr, and other goodies
library(lubridate) # to handle dates
library(GGally) # for correlation-scatter plot matrix
library(ggfortify) # to produce residual diagnostic plots
library(rsample) # to split dataframe in training- & testing sets
library(janitor) # clean_names()
library(broom) # use broom:augment() to get tidy table with regression output, residuals, etc
library(huxtable) # to get summary table of all models produced
library(kableExtra) # for formatting tables
library(moderndive) # for getting regression tables
library(skimr) # for skim
library(mosaic)
library(leaflet) # for interactive HTML maps
library(tidytext)
library(viridis)
library(vroom)
library(kableExtra)
library(performance)
library(patchwork)
library(formattable)
#glimpse(listings)
skim(listings)
listings <- vroom("http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz")%>%
#drop variables that contain 'scrape' in their column name
select(- contains("scrape"))
listings <- listings %>%
mutate(price = parse_number(price))
#glimpse(listings)
skim(listings)
ncol(listings)
nrow(listings)
print(paste("List of the variables that are numbers"))
i=1
for(i in 1:ncol(listings)) {       # for-loop over columns
if (is.numeric(listings[[i]]) == TRUE)
{
print(colnames(listings[i]))
}
}
maxElements = 10
result <- apply(listings, 2, function(x) length(unique(x)))
print(paste("List of the variables with less than ",maxElements, "elements"))
for(i in 1:ncol(listings)) {       # for-loop over columns
if(result[colnames(listings)[i]] < maxElements)
{
print(colnames(listings)[i])
}
}
maxElements = 10
result <- apply(listings, 2, function(x) length(unique(x)))
print(paste("List of the variables with less than ",maxElements, "elements"))
for(i in 1:ncol(listings)) {       # for-loop over columns
if(result[colnames(listings)[i]] < maxElements)
{
print(colnames(listings)[i])
}
}
# finding significant correlations - to be completed
# listings %>%
#   filter(number_of_reviews>50 & minimum_nights < 4 & price < 250) %>%
#   select(minimum_nights,price,review_scores_rating, accommodates, availability_365,reviews_per_month) %>%
#   ggpairs(alpha = 0.3)
# to be completed by filter the values for not so narrowed curves
# exploring correlations with type of hosts
listings%>%
select(price, host_id, host_response_time, host_is_superhost, calculated_host_listings_count, calculated_host_listings_count_entire_homes, calculated_host_listings_count_private_rooms, calculated_host_listings_count_shared_rooms)%>%
ggpairs(alpha = 0.3)
# exploring correlations with parameters of house
listings%>%
select(price, accommodates, bedrooms, beds, room_type)%>%
ggpairs(alpha = 0.3)
#exploring correlations with location
listings%>%
select(price, neighbourhood_cleansed, latitude, longitude)%>%
ggpairs(alpha = 0.3)
# exploring correlations with availability
listings%>%
select(price, minimum_nights, maximum_nights, availability_30, availability_60, availability_90)%>%
ggpairs(alpha = 0.3)
# exploring correlations with reviews
listings%>%
select(price, number_of_reviews, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_value, reviews_per_month)%>%
ggpairs(alpha = 0.3)
listings %>%
filter(number_of_reviews>50) %>%
group_by(neighbourhood_cleansed) %>%
summarise(medianPrice = median(price),
medianRate = median(review_scores_rating, na.rm = TRUE),
medianBedroom = median(bedrooms, na.rm = TRUE),
medianMinimumNights = median(minimum_minimum_nights,na.rm = TRUE))
listings %>%
filter(number_of_reviews>50) %>%
group_by(property_type) %>%
summarise(medianPrice = median(price),
medianRate = median(review_scores_rating, na.rm = TRUE),
medianBedroom = median(bedrooms, na.rm = TRUE),
medianMinimumNights = median(minimum_minimum_nights,na.rm = TRUE),
totalAccomodations = count(property_type)) %>%
filter(totalAccomodations > 5)
listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(medianPrice = median(price)) %>%
mutate(neighbourhood_cleansed = fct_reorder(neighbourhood_cleansed, medianPrice)) %>%
ggplot(aes(x=medianPrice,y=neighbourhood_cleansed)) +
geom_col() +
theme_classic() +
labs(title = "Median price in Bologna",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(totalAccomodation = count(neighbourhood_cleansed)) %>%
mutate(neighbourhood_cleansed = fct_reorder(neighbourhood_cleansed, totalAccomodation)) %>%
ggplot(aes(x=totalAccomodation,y=neighbourhood_cleansed)) +
geom_col() +
theme_classic() +
labs(title = "Number of accomodations in Bologna",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(), #
axis.title.y = element_blank())
listings %>%
filter(price<250) %>%
ggplot(aes(price,fill=neighbourhood_cleansed)) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of price",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_fill_discrete(name = "Neighbourhood")
listings %>%
filter(number_of_reviews>50) %>%
ggplot(aes(review_scores_rating, fill = neighbourhood_cleansed)) +
geom_density(position = "stack", alpha = 0.4) +
labs(title = "Ratings with number of reviews more than 50",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_fill_discrete(name = "Neighbourhood")
listings %>%
group_by(property_type) %>%
summarise(countType = count(property_type)) %>%
mutate(percentage = percent(countType/sum(countType))) %>%
slice_max(order_by = countType, n=4)
listings <- listings %>%
mutate(prop_type_simplified = case_when(
property_type %in% c("Entire rental unit","Entire condo", "Private room in rental unit","Private room in condo") ~ property_type,
TRUE ~ "Other"
))
listings %>%
count(property_type, prop_type_simplified) %>%
arrange(desc(n))
listings%>%
group_by(minimum_nights)%>%
summarise(tot_min_night=count(minimum_nights))%>%
mutate(percentage = percent(tot_min_night/sum(tot_min_night)))%>%
arrange(desc(percentage))%>%
slice_head(n=3)
listings%>%
group_by(minimum_nights)%>%
summarise(tot_min_night=count(minimum_nights))%>%
mutate(percentage = percent(tot_min_night/sum(tot_min_night)))%>%
arrange(desc(minimum_nights))%>%
slice_head(n=10)
listings<- listings%>%
filter(minimum_nights<=4)
leaflet(data = filter(listings, minimum_nights <= 4)) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addCircleMarkers(lng = ~longitude,
lat = ~latitude,
radius = 2,
fillColor = "blue",
fillOpacity = 0.4,
popup = ~listing_url,
label = ~property_type)
listings <- listings %>%
mutate(price_4_nights = price*4)
g1 <- listings %>%
filter(accommodates>1, price<250) %>%
ggplot(aes(price_4_nights)) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of price of 4 nights",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
g2 <- listings %>%
filter(accommodates>1, price<250) %>%
ggplot(aes(log(price_4_nights))) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of log(price) of 4 nights",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
g1+g2
g1 <- listings %>%
filter(accommodates>1, price<250) %>%
ggplot(aes(price_4_nights)) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of price of 4 nights",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
g2 <- listings %>%
filter(accommodates>1, price<250) %>%
ggplot(aes(log(price_4_nights))) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of log(price) of 4 nights",
subtitle = "") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
g1+g2
g1 <- listings %>%
filter(accommodates>1, price<250) %>%
ggplot(aes(price_4_nights)) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of price of 4 nights",
subtitle = "") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
g2 <- listings %>%
filter(accommodates>1, price<250) %>%
ggplot(aes(log(price_4_nights))) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of log(price) of 4 nights",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
g1+g2
model1 <- lm(log(price_4_nights) ~ prop_type_simplified +number_of_reviews + review_scores_rating, data = listings)
msummary(model1)
model1a <- lm(log(price_4_nights) ~ review_scores_rating, data = listings)
msummary(model1a)
model1a <- lm(log(price_4_nights) ~ review_scores_rating, data = listings)
msummary(model1a)
model1b <- lm(log(price_4_nights) ~ prop_type_simplified, data = listings)
msummary(model1b)
model1b <- lm(log(price_4_nights) ~ prop_type_simplified, data = listings)
msummary(model1b)
model2 <- lm(log(price_4_nights) ~ prop_type_simplified +number_of_reviews + review_scores_rating + room_type, data = listings)
msummary(model2)
model2a <- lm(log(price_4_nights) ~ room_type, data = listings)
msummary(model2a)
listings<-listings%>%
separate(bathrooms_text,
into = c("n_bathrooms", "text_bathrooms"),
sep = 3)
listings<-listings%>%
mutate(n_bathrooms=ifelse(test=n_bathrooms=="Hal",
yes="0.5",
no=n_bathrooms),
n_bathrooms=ifelse(test=n_bathrooms=="Pri",
yes="0.5",
no=n_bathrooms),
n_bathrooms = parse_number(n_bathrooms))
model3a <- lm(log(price_4_nights) ~ n_bathrooms, data = listings)
msummary(model3a)
model3b <- lm(log(price_4_nights) ~ bedrooms, data = listings)
msummary(model3b)
model3c <- lm(log(price_4_nights) ~ beds, data = listings)
msummary(model3c)
model3d <- lm(log(price_4_nights) ~ accommodates, data = listings)
msummary(model3d)
listings%>%
group_by(host_is_superhost)%>%
summarise(avg_price=mean(price_4_nights))
model4 <- lm(log(price_4_nights) ~ host_is_superhost, data = listings)
msummary(model4)
listings<-listings%>%
mutate(neighbourhood_simplified=neighbourhood_cleansed)
model6 <- lm(log(price_4_nights) ~ neighbourhood_simplified, data = listings)
msummary(model6)
# finding significant correlations - to be completed
# listings %>%
#   filter(number_of_reviews>50 & minimum_nights < 4 & price < 250) %>%
#   select(minimum_nights,price,review_scores_rating, accommodates, availability_365,reviews_per_month) %>%
#   ggpairs(alpha = 0.3)
# to be completed by filter the values for not so narrowed curves
# exploring correlations with type of hosts
listings%>%
select(price, host_id, host_response_time, host_is_superhost, calculated_host_listings_count, calculated_host_listings_count_entire_homes, calculated_host_listings_count_private_rooms, calculated_host_listings_count_shared_rooms)%>%
ggpairs(alpha = 0.3)
# exploring correlations with parameters of house
listings%>%
select(price, accommodates, bedrooms, beds, room_type)%>%
ggpairs(alpha = 0.3)
#exploring correlations with location
listings%>%
select(price, neighbourhood_cleansed, latitude, longitude)%>%
ggpairs(alpha = 0.3)
# exploring correlations with availability
listings%>%
select(price, minimum_nights, maximum_nights, availability_30, availability_60, availability_90)%>%
ggpairs(alpha = 0.3)
# exploring correlations with reviews
listings%>%
select(price, number_of_reviews, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_value, reviews_per_month)%>%
ggpairs(alpha = 0.3)
listings %>%
filter(number_of_reviews>50) %>%
group_by(neighbourhood_cleansed) %>%
summarise(medianPrice = median(price),
medianRate = median(review_scores_rating, na.rm = TRUE),
medianBedroom = median(bedrooms, na.rm = TRUE),
medianMinimumNights = median(minimum_minimum_nights,na.rm = TRUE))
listings %>%
filter(number_of_reviews>50) %>%
group_by(property_type) %>%
summarise(medianPrice = median(price),
medianRate = median(review_scores_rating, na.rm = TRUE),
medianBedroom = median(bedrooms, na.rm = TRUE),
medianMinimumNights = median(minimum_minimum_nights,na.rm = TRUE),
totalAccomodations = count(property_type)) %>%
filter(totalAccomodations > 5)
listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(medianPrice = median(price)) %>%
mutate(neighbourhood_cleansed = fct_reorder(neighbourhood_cleansed, medianPrice)) %>%
ggplot(aes(x=medianPrice,y=neighbourhood_cleansed)) +
geom_col() +
theme_classic() +
labs(title = "Median price in Bologna",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank())
listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(totalAccomodation = count(neighbourhood_cleansed)) %>%
mutate(neighbourhood_cleansed = fct_reorder(neighbourhood_cleansed, totalAccomodation)) %>%
ggplot(aes(x=totalAccomodation,y=neighbourhood_cleansed)) +
geom_col() +
theme_classic() +
labs(title = "Number of accomodations in Bologna",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(), #
axis.title.y = element_blank())
listings %>%
filter(price<250) %>%
ggplot(aes(price,fill=neighbourhood_cleansed)) +
geom_histogram(binwidth = 10) +
labs(title = "Distribution of price",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_fill_discrete(name = "Neighbourhood")
listings %>%
filter(number_of_reviews>50) %>%
ggplot(aes(review_scores_rating, fill = neighbourhood_cleansed)) +
geom_density(position = "stack", alpha = 0.4) +
labs(title = "Ratings with number of reviews more than 50",
subtitle = "",
caption = "Source: http://data.insideairbnb.com/italy/emilia-romagna/bologna/2022-06-11/data/listings.csv.gz") +
theme(plot.caption = element_text(hjust= 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
scale_fill_discrete(name = "Neighbourhood")
